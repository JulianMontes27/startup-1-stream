// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("users")
}



// Model for accounts (social login, etc.)
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Model for sessions (tracking user sessions)
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now()) // when the user logs in
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// Model for email verification tokens
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Model for services (both offered and sought)
model Service {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    String
  price       Float
  status      String
  location    Location?
  offererId   String   
  seekerId    String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("services")
}


model Location {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  latitude  Float
  longitude Float
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String   @unique @db.ObjectId

  @@map("locations")

}

//predefined categories for users' services
enum ServiceCategory {
  PERSONAL
  HOME_IMPROVEMENT
  TECHNOLOGY
  AUTOMOTIVE
  FOOD
  CREATIVE
  HEALTH
  EDUCATION
  TRANSPORTATION
  MISCELLANEOUS
}
